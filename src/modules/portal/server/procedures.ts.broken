import { eq, and, gte, or, isNull, count } from 'drizzle-orm';
import {
  createTRPCRouter,
  protectedProcedure,
  orgProtectedProcedure,
} from '@/trpc/init';
import { accounts, users } from '@/modules/accounts/schema';
import { residents } from '@/modules/residents/schema';
import { units } from '@/modules/units/schema';
import { buildings } from '@/modules/buildings/schema';
import { meetings } from '@/modules/meetings/schema';
import { announcements } from '@/modules/announcements/schema';
import { notifications } from '@/modules/notifications/schema';
import { residentSetupSchema, residentProfileUpdateSchema } from '../schema';
import { TRPCError } from '@trpc/server';
import { clerkClient } from '@clerk/nextjs/server';
import { z } from 'zod';

// Helper function to detect duplicate key errors in various formats
function isDuplicateKeyError(error: unknown): boolean {
  if (!error) return false;

  // Convert error to string to handle various error shapes
  const errorStr = String(error);
  const errorMessage = error instanceof Error ? error.message : errorStr;

  // Check common duplicate key error patterns
  const duplicateKeyPhrases = [
    'duplicate key',
    'UNIQUE constraint',
    'unique violation',
    'uniqueness constraint',
    'already exists',
    'users_user_id_unique',
    'violates unique constraint',
  ];

  return duplicateKeyPhrases.some(phrase =>
    errorMessage.toLowerCase().includes(phrase.toLowerCase())
  );
}

export const portalRouter = createTRPCRouter({
  // Setup resident account (member role)
  setupResidentAccount: protectedProcedure
    .input(residentSetupSchema)
    .mutation(async ({ ctx, input }) => {
      const { db, userId, orgId } = ctx;

      if (!orgId) {
        throw new Error('Organization is required');
      }

      // Check if account already exists
      const existingAccount = await db
        .select()
        .from(accounts)
        .where(and(eq(accounts.userId, userId), eq(accounts.orgId, orgId)))
        .limit(1);

      let account;
      if (existingAccount.length === 0) {
        // Create new account with member role
        [account] = await db
          .insert(accounts)
          .values({
            userId,
            orgId,
            name: input.name,
            email: input.email,
            role: 'member',
          })
          .returning();
      } else {
        account = existingAccount[0];
      }

      // Check if resident record exists for this unit
      const existingResident = await db
        .select()
        .from(residents)
        .where(
          and(
            eq(residents.unitId, input.unitId),
            eq(residents.email, input.email),
            eq(residents.orgId, orgId)
          )
        )
        .limit(1);

      if (existingResident.length === 0) {
        throw new Error(
          'No resident record found for this unit and email. Please contact building management.'
        );
      }

      const resident = existingResident[0];

      // Create or update user record
      const existingUser = await db
        .select()
        .from(users)
        .where(and(eq(users.userId, userId), eq(users.orgId, orgId)))
        .limit(1);

      let user;
      if (existingUser.length === 0) {
        [user] = await db
          .insert(users)
          .values({
            userId,
            orgId,
            name: input.name,
            email: input.email,
            phone: input.phone || null,
            residentId: resident.id,
          })
          .returning();
      } else {
        [user] = await db
          .update(users)
          .set({
            name: input.name,
            phone: input.phone || null,
            residentId: resident.id,
            updatedAt: new Date(),
          })
          .where(and(eq(users.userId, userId), eq(users.orgId, orgId)))
          .returning();
      }

      return { account, user, resident };
    }), // Get current resident's info
  getCurrentResident: orgProtectedProcedure.query(async ({ ctx }) => {
    const { db, userId, orgId } = ctx;

    console.log('🏠 getCurrentResident - UserId:', userId, 'OrgId:', orgId);

    // Get user record - use userId ONLY for lookup, filtering by orgId in the result
    const userRecords = await db
      .select()
      .from(users)
      .where(eq(users.userId, userId))
      .limit(2); // Get up to 2 to detect duplicates

    console.log(
      '🏠 getCurrentResident - User records found:',
      userRecords.length
    );

    // Find the user record for the current org
    const user = userRecords.find(u => u.orgId === orgId);

    console.log('🏠 getCurrentResident - User record for current org:', user);

    if (!user || !user.residentId) {
      throw new TRPCError({
        code: 'NOT_FOUND',
        message: 'Resident not found',
      });
    }

    // Get resident info with unit and building details
    const residentInfo = await db
      .select({
        resident: residents,
        unit: units,
        building: buildings,
      })
      .from(residents)
      .leftJoin(units, eq(residents.unitId, units.id))
      .leftJoin(buildings, eq(units.buildingId, buildings.id))
      .where(and(eq(residents.id, user.residentId), eq(residents.orgId, orgId)))
      .limit(1);

    console.log('🏠 getCurrentResident - Resident info:', residentInfo);

    if (residentInfo.length === 0) {
      throw new TRPCError({
        code: 'NOT_FOUND',
        message: 'Resident information not found',
      });
    }

    const result = {
      user,
      ...residentInfo[0],
    };

    console.log('🏠 getCurrentResident - Final result:', result);

    return result;
  }),
  // Update profile
  updateProfile: orgProtectedProcedure
    .input(residentProfileUpdateSchema)
    .mutation(async ({ ctx, input }) => {
      const { db, userId, orgId } = ctx;

      const [updatedUser] = await db
        .update(users)
        .set({
          name: input.name,
          phone: input.phone,
          updatedAt: new Date(),
        })
        .where(and(eq(users.userId, userId), eq(users.orgId, orgId)))
        .returning();

      return updatedUser;
    }),
  // Get available units for setup
  getAvailableUnits: orgProtectedProcedure.query(async ({ ctx }) => {
    const { db, orgId } = ctx;

    const availableUnits = await db
      .select({
        unit: units,
        building: buildings,
      })
      .from(units)
      .leftJoin(buildings, eq(units.buildingId, buildings.id))
      .where(eq(units.orgId, orgId));

    return availableUnits;
  }), // Get dashboard data for resident
  getDashboardData: orgProtectedProcedure.query(async ({ ctx }) => {
    const { db, userId, orgId } = ctx;

    // Get user and resident info
    const [user] = await db
      .select()
      .from(users)
      .where(and(eq(users.userId, userId), eq(users.orgId, orgId)))
      .limit(1);

    if (!user || !user.residentId) {
      throw new Error('Resident not found');
    }

    // Get unit monthly fee for next payment calculation
    const residentInfo = await db
      .select({
        resident: residents,
        unit: units,
      })
      .from(residents)
      .leftJoin(units, eq(residents.unitId, units.id))
      .where(eq(residents.id, user.residentId))
      .limit(1);

    const currentDate = new Date();
    const nextMonth = new Date(
      currentDate.getFullYear(),
      currentDate.getMonth() + 1,
      1
    );

    // Get upcoming meetings
    const upcomingMeetings = await db
      .select()
      .from(meetings)
      .where(
        and(
          eq(meetings.orgId, orgId),
          eq(meetings.isCompleted, false),
          gte(meetings.scheduledDate, currentDate)
        )
      )
      .orderBy(meetings.scheduledDate)
      .limit(1);

    // Get recent announcements count
    const recentAnnouncements = await db
      .select()
      .from(announcements)
      .where(
        and(
          eq(announcements.orgId, orgId),
          eq(announcements.isPublished, true),
          or(
            isNull(announcements.expiresAt),
            gte(announcements.expiresAt, currentDate)
          ),
          gte(
            announcements.publishedAt,
            new Date(currentDate.getTime() - 7 * 24 * 60 * 60 * 1000)
          ) // Last 7 days
        )
      );

    // Calculate next payment info
    const monthlyFee = residentInfo[0]?.unit?.monthlyFee || 0;

    return {
      nextPayment: {
        amount: monthlyFee,
        dueDate: nextMonth,
      },
      upcomingMeeting: upcomingMeetings[0] || null,
      announcementsCount: recentAnnouncements.length,
      residentStatus: {
        isActive: residentInfo[0]?.resident?.isActive || false,
        isOwner: residentInfo[0]?.resident?.isOwner || false,
      },
    };
  }),

  // Get resident profile for the current user (enhanced version for linking)
  getResidentProfile: orgProtectedProcedure.query(async ({ ctx }) => {
    const { db, userId, orgId } = ctx;

    // Get user with resident link
    const [user] = await db
      .select()
      .from(users)
      .where(and(eq(users.userId, userId), eq(users.orgId, orgId)))
      .limit(1);

    if (!user?.residentId) {
      throw new TRPCError({
        code: 'FORBIDDEN',
        message: 'User is not linked to a resident record',
      });
    }

    // Get full resident profile with unit/building info
    const [residentProfile] = await db
      .select({
        resident: residents,
        unit: units,
        building: buildings,
      })
      .from(residents)
      .leftJoin(units, eq(residents.unitId, units.id))
      .leftJoin(buildings, eq(units.buildingId, buildings.id))
      .where(eq(residents.id, user.residentId))
      .limit(1);

    if (!residentProfile) {
      throw new TRPCError({
        code: 'NOT_FOUND',
        message: 'Resident profile not found',
      });
    }

    return residentProfile;
  }), // Check if current user has resident access (with auto-linking)
  hasResidentAccess: orgProtectedProcedure.query(async ({ ctx }) => {
    const { db, userId, orgId } = ctx;

    console.log(
      `🔐 Checking resident access for user ${userId} in org ${orgId}`
    );

    // First, check if user is already linked - ONLY use userId for lookup
    const existingUsers = await db
      .select()
      .from(users)
      .where(eq(users.userId, userId))
      .limit(2); // Get up to 2 to detect duplicates

    // Process user records - there should be only one, but handle multiple just in case
    if (existingUsers.length > 0) {
      const userInCurrentOrg = existingUsers.find(u => u.orgId === orgId);

      // First, check if user is linked in current org
      if (userInCurrentOrg?.residentId) {
        console.log(
          `✅ User already linked to resident ${userInCurrentOrg.residentId} in current org`
        );
        return {
          hasAccess: true,
          residentId: userInCurrentOrg.residentId,
          autoLinked: false,
          message: 'Already linked',
          userRecordExists: true,
        };
      }

      // If user exists but is not linked, we'll continue with auto-linking
      console.log(
        `👤 User exists but is not linked to a resident in current org`
      );
    }

    // If not linked, attempt auto-linking by email
    console.log(`🔗 Attempting auto-link for user ${userId}`);

    try {
      // Get user's email from Clerk
      const clerk = await clerkClient();
      const clerkUser = await clerk.users.getUser(userId);
      const userEmail = clerkUser.emailAddresses?.[0]?.emailAddress;

      if (!userEmail) {
        console.log(`❌ No email found for user ${userId}`);
        return {
          hasAccess: false,
          residentId: null,
          autoLinked: false,
          message: 'No email address found',
          error: 'NO_EMAIL',
          userRecordExists: existingUsers.length > 0,
        };
      }

      console.log(`📧 User email: ${userEmail}`);

      // Find matching resident by email
      const [matchingResident] = await db
        .select()
        .from(residents)
        .where(
          and(
            eq(residents.email, userEmail),
            eq(residents.orgId, orgId),
            eq(residents.isActive, true)
          )
        )
        .limit(1);

      if (!matchingResident) {
        console.log(`❌ No matching resident found for email ${userEmail}`);
        return {
          hasAccess: false,
          residentId: null,
          autoLinked: false,
          message: `No resident record found for email: ${userEmail}`,
          userEmail,
          error: 'NO_RESIDENT_MATCH',
          userRecordExists: existingUsers.length > 0,
        };
      }

      console.log(
        `👤 Found matching resident: ${matchingResident.firstName} ${matchingResident.lastName} (${matchingResident.id})`
      );

      // Create or update user record with resident link
      const userInCurrentOrg = existingUsers.find(u => u.orgId === orgId);

      try {
        if (userInCurrentOrg) {
          // Update existing user record with resident link
          console.log(`🔄 Updating existing user record with resident link`);
          const [updatedUser] = await db
            .update(users)
            .set({
              orgId: orgId, // Ensure orgId is set correctly
              residentId: matchingResident.id,
              name: `${matchingResident.firstName} ${matchingResident.lastName}`,
              email: matchingResident.email,
              phone: matchingResident.phone,
              updatedAt: new Date(),
            })
            .where(eq(users.userId, userId))
            .returning();

          console.log(`✅ Updated user record:`, updatedUser);        } else {
          // Create new user record
          console.log(`➕ Creating new user record with resident link`);
          
          // Check one more time if user already exists (might have been created in a race condition)
          const finalCheck = await db
            .select()
            .from(users)
            .where(eq(users.userId, userId))
            .limit(1);
            
          if (finalCheck.length > 0) {
            console.log(`⚠️ User record already exists, updating instead of inserting`);
            // User exists, just update it
            const [updatedUser] = await db
              .update(users)
              .set({
                orgId: orgId,
                residentId: matchingResident.id,
                name: `${matchingResident.firstName} ${matchingResident.lastName}`,
                email: matchingResident.email,
                phone: matchingResident.phone,
                updatedAt: new Date(),
              })
              .where(eq(users.userId, userId))
              .returning();
              
            console.log(`✅ Updated existing user record:`, updatedUser);
          } else {
            try {
              const [newUser] = await db
                .insert(users)
                .values({
                  userId: userId,
                  orgId: orgId,
                  name: `${matchingResident.firstName} ${matchingResident.lastName}`,
                  email: matchingResident.email,
                  phone: matchingResident.phone,
                  residentId: matchingResident.id
                })
                .returning();

              console.log(`✅ Created new user record:`, newUser);
            } catch (insertError) {
              // Handle potential race condition - another request might have created the record
              console.log(`⚠️ Error during insert:`, insertError);
              
              if (isDuplicateKeyError(insertError)) {
                console.log(
                  `⚠️ Duplicate key error during insert, trying update instead`
                );

                // Try updating instead
                const [updatedUser] = await db
                  .update(users)
                  .set({
                    orgId: orgId,
                    residentId: matchingResident.id,
                    name: `${matchingResident.firstName} ${matchingResident.lastName}`,
                    email: matchingResident.email,
                    phone: matchingResident.phone,
                    updatedAt: new Date(),
                  })
                  .where(eq(users.userId, userId))
                  .returning();                console.log(
                  `✅ Updated user record after insert failed:`,
                  updatedUser
                );
            } else {
              // Re-throw if not a duplicate key error
              throw insertError;
            }
          }
        }
      } catch (dbError) {
        console.error(`❌ Database operation failed:`, dbError);
        return {
          hasAccess: false,
          residentId: null,
          autoLinked: false,
          message: 'Database operation failed during auto-linking',
          error: 'DB_ERROR',
          dbErrorMessage: String(dbError),
          isDuplicateKey: isDuplicateKeyError(dbError),
        };
      }

      // Verify the link was successful by reading the record again
      const [verifiedUser] = await db
        .select()
        .from(users)
        .where(eq(users.userId, userId))
        .limit(1);

      if (!verifiedUser?.residentId) {
        console.error(
          `❌ Verification failed: User record doesn't have residentId after update/insert`
        );
        return {
          hasAccess: false,
          residentId: null,
          autoLinked: false,
          message: 'Auto-linking failed: verification error',
          error: 'VERIFICATION_FAILED',
          userRecord: verifiedUser || null,
        };
      }

      console.log(
        `✅ Successfully auto-linked user to resident ${matchingResident.id}`
      );

      return {
        hasAccess: true,
        residentId: matchingResident.id,
        autoLinked: true,
        message: `Successfully linked to ${matchingResident.firstName} ${matchingResident.lastName}`,
        residentName: `${matchingResident.firstName} ${matchingResident.lastName}`,
        userRecordExists: true,
      };
    } catch (error) {
      console.error(`❌ Auto-linking failed for user ${userId}:`, error);
      return {
        hasAccess: false,
        residentId: null,
        autoLinked: false,
        message:
          'Auto-linking failed: ' +
          (error instanceof Error ? error.message : String(error)),
        error: 'AUTO_LINK_FAILED',
        errorDetails: error instanceof Error ? error.stack : String(error),
      };
    }
  }),

  // Update resident profile (limited fields)
  updateResidentProfile: orgProtectedProcedure
    .input(
      z.object({
        phone: z.string().optional().nullable(),
        emergencyContact: z.string().optional().nullable(),
        emergencyPhone: z.string().optional().nullable(),
        notes: z.string().optional().nullable(),
      })
    )
    .mutation(async ({ ctx, input }) => {
      const { db, userId, orgId } = ctx;

      // Get user with resident link
      const [user] = await db
        .select()
        .from(users)
        .where(and(eq(users.userId, userId), eq(users.orgId, orgId)))
        .limit(1);

      if (!user?.residentId) {
        throw new TRPCError({
          code: 'FORBIDDEN',
          message: 'User is not linked to a resident record',
        });
      }

      // Update resident record
      const [updatedResident] = await db
        .update(residents)
        .set({
          ...input,
          updatedAt: new Date(),
        })
        .where(eq(residents.id, user.residentId))
        .returning();

      return updatedResident;
    }),
  // Get resident dashboard data
  getResidentDashboard: protectedProcedure.query(async ({ ctx }) => {
    const { db, userId, orgId } = ctx;

    if (!orgId) {
      throw new TRPCError({
        code: 'UNAUTHORIZED',
        message: 'Organization access required',
      });
    }

    console.log(`📊 getResidentDashboard - User: ${userId}, Org: ${orgId}`);

    // Get resident info linked to user - using userId for primary lookup, then filter by orgId
    const userRecords = await db
      .select({
        user: users,
        resident: residents,
        unit: units,
        building: buildings,
      })
      .from(users)
      .leftJoin(residents, eq(users.residentId, residents.id))
      .leftJoin(units, eq(residents.unitId, units.id))
      .leftJoin(buildings, eq(units.buildingId, buildings.id))
      .where(eq(users.userId, userId));

    // Filter for current org
    const userRecord = userRecords.find(record => record.user.orgId === orgId);

    if (!userRecord || !userRecord.resident) {
      console.log(
        `❌ getResidentDashboard - No resident profile found for user ${userId} in org ${orgId}`
      );
      throw new TRPCError({
        code: 'NOT_FOUND',
        message: 'Resident profile not found',
      });
    }
    console.log(
      `✅ getResidentDashboard - Found resident profile for user ${userId}`
    );
    const userResidentData = {
      resident: userRecord.resident,
      unit: userRecord.unit,
      building: userRecord.building,
    };

    // Get recent announcements
    const recentAnnouncements = await db
      .select()
      .from(announcements)
      .where(
        and(
          eq(announcements.orgId, orgId),
          eq(announcements.isPublished, true),
          or(
            isNull(announcements.buildingId),
            userResidentData.unit?.buildingId
              ? eq(announcements.buildingId, userResidentData.unit.buildingId)
              : isNull(announcements.buildingId)
          )
        )
      )
      .orderBy(announcements.publishedAt)
      .limit(5);

    // Get upcoming meetings
    const upcomingMeetings = await db
      .select()
      .from(meetings)
      .where(
        and(
          eq(meetings.orgId, orgId),
          gte(meetings.scheduledDate, new Date()),
          or(
            isNull(meetings.buildingId),
            userResidentData.unit?.buildingId
              ? eq(meetings.buildingId, userResidentData.unit.buildingId)
              : isNull(meetings.buildingId)
          )
        )
      )
      .orderBy(meetings.scheduledDate)
      .limit(3);

    return {
      resident: userResidentData.resident,
      unit: userResidentData.unit,
      building: userResidentData.building,
      announcements: recentAnnouncements,
      upcomingMeetings: upcomingMeetings,
    };
  }),

  // Submit maintenance request
  submitMaintenanceRequest: protectedProcedure
    .input(
      z.object({
        title: z.string().min(1),
        description: z.string().min(1),
        priority: z.enum(['low', 'normal', 'high', 'urgent']).default('normal'),
        category: z.string().min(1),
        location: z.string().optional(),
      })
    )
    .mutation(async ({ ctx, input }) => {
      const { db, userId, orgId } = ctx;

      if (!orgId) {
        throw new TRPCError({
          code: 'UNAUTHORIZED',
          message: 'Organization access required',
        });
      }

      // Get resident info
      const user = await db
        .select({
          resident: residents,
          unit: units,
          building: buildings,
        })
        .from(users)
        .leftJoin(residents, eq(users.residentId, residents.id))
        .leftJoin(units, eq(residents.unitId, units.id))
        .leftJoin(buildings, eq(units.buildingId, buildings.id))
        .where(and(eq(users.userId, userId), eq(users.orgId, orgId)))
        .limit(1);

      if (!user.length || !user[0].resident) {
        throw new TRPCError({
          code: 'NOT_FOUND',
          message: 'Resident profile not found',
        });
      }

      // Create notification for maintenance request
      const [notification] = await db
        .insert(notifications)
        .values({
          orgId,
          residentId: user[0].resident.id,
          type: 'maintenance_request',
          title: `New Maintenance Request: ${input.title}`,
          message: `${input.description} - Priority: ${input.priority}`,
          priority: input.priority,
          category: 'maintenance',
          metadata: {
            requestType: 'maintenance',
            unitId: user[0].unit?.id,
            buildingId: user[0].building?.id,
            location: input.location,
            category: input.category,
          },
        })
        .returning();

      return {
        success: true,
        notificationId: notification.id,
        message: 'Maintenance request submitted successfully',
      };
    }),
  // Get resident notifications
  getResidentNotifications: protectedProcedure
    .input(
      z.object({
        page: z.number().min(1).default(1),
        pageSize: z.number().min(1).max(50).default(20),
        isRead: z.boolean().optional(),
      })
    )
    .query(async ({ ctx, input }) => {
      const { db, userId, orgId } = ctx;
      const { page, pageSize, isRead } = input;

      if (!orgId) {
        throw new TRPCError({
          code: 'UNAUTHORIZED',
          message: 'Organization access required',
        });
      }

      console.log(
        `📬 getResidentNotifications - User: ${userId}, Org: ${orgId}`
      );

      // Get resident ID - using only userId for lookup, then filter by orgId
      const userRecords = await db
        .select({
          userId: users.userId,
          orgId: users.orgId,
          residentId: users.residentId,
        })
        .from(users)
        .where(eq(users.userId, userId));

      // Filter for current org
      const userRecord = userRecords.find(record => record.orgId === orgId);

      if (!userRecord?.residentId) {
        console.log(
          `❌ getResidentNotifications - No linked resident found for user ${userId} in org ${orgId}`
        );
        return { notifications: [], total: 0 };
      }

      console.log(
        `✅ getResidentNotifications - Found linked resident ${userRecord.residentId}`
      );

      const conditions = [
        eq(notifications.orgId, orgId),
        or(
          eq(notifications.userId, userId),
          eq(notifications.residentId, userRecord.residentId)
        ),
      ];

      if (isRead !== undefined) {
        conditions.push(eq(notifications.isRead, isRead));
      }

      const offset = (page - 1) * pageSize;

      const [notificationsList, [{ total }]] = await Promise.all([
        db
          .select()
          .from(notifications)
          .where(and(...conditions))
          .orderBy(notifications.createdAt)
          .limit(pageSize)
          .offset(offset),
        db
          .select({ total: count() })
          .from(notifications)
          .where(and(...conditions)),
      ]);

      return {
        notifications: notificationsList,
        total: total || 0,
      };
    }),
  // Debug procedure to help troubleshoot auto-linking issues
  debugAutoLinking: orgProtectedProcedure.query(async ({ ctx }) => {
    const { db, userId, orgId } = ctx;

    console.log(
      `🔍 debugAutoLinking - Running diagnostics for user ${userId} in org ${orgId}`
    );

    try {
      // Get user's email from Clerk
      const clerk = await clerkClient();
      const clerkUser = await clerk.users.getUser(userId);
      const userEmail = clerkUser.emailAddresses?.[0]?.emailAddress;

      // Get all residents in the organization (with active status)
      const allResidents = await db
        .select({
          id: residents.id,
          firstName: residents.firstName,
          lastName: residents.lastName,
          email: residents.email,
          isActive: residents.isActive,
          unitId: residents.unitId,
        })
        .from(residents)
        .where(eq(residents.orgId, orgId));

      console.log(
        `🔍 debugAutoLinking - Found ${allResidents.length} residents in org ${orgId}`
      );

      // Get current user records (only filter by userId, not orgId)
      const currentUserRecords = await db
        .select()
        .from(users)
        .where(eq(users.userId, userId));

      console.log(
        `🔍 debugAutoLinking - Found ${currentUserRecords.length} user records for userId ${userId}`
      );

      // Get user history - check if there were previous entries with same email
      const userHistory = userEmail
        ? await db
            .select({
              id: users.id,
              userId: users.userId,
              orgId: users.orgId,
              residentId: users.residentId,
              createdAt: users.createdAt,
              updatedAt: users.updatedAt,
            })
            .from(users)
            .where(eq(users.email, userEmail))
            .limit(5)
        : [];

      // Generate diagnostic information about what resident would match
      const matchingResident = userEmail
        ? allResidents.find(r => r.email === userEmail && r.isActive)
        : null;
      // Also generate sample SQL for debugging (just the query string)
      const updateQuerySQL = matchingResident
        ? `UPDATE "users" SET "resident_id" = '${matchingResident.id}', "org_id" = '${orgId}', "updated_at" = '${new Date().toISOString()}' WHERE "user_id" = '${userId}'`
        : null;

      // Check if user already has any resident links
      const existingLinks = currentUserRecords.filter(
        rec => rec.residentId !== null
      );

      return {
        userInfo: {
          userId,
          orgId,
          clerkEmail: userEmail,
          hasUserRecord: currentUserRecords.length > 0,
          currentUserRecords: currentUserRecords,
          previousUserRecords: userHistory,
          existingResidentLinks:
            existingLinks.length > 0 ? existingLinks : null,
        },
        residents: allResidents.map(r => ({
          id: r.id,
          name: `${r.firstName} ${r.lastName}`,
          email: r.email,
          isActive: r.isActive,
          isMatch: r.email === userEmail,
          unitId: r.unitId,
        })),
        matchingResident: matchingResident
          ? {
              id: matchingResident.id,
              name: `${matchingResident.firstName} ${matchingResident.lastName}`,
              email: matchingResident.email,
              isActive: matchingResident.isActive,
            }
          : null,
        sqlQueries: matchingResident
          ? {
              updateUserQuery: updateQuerySQL,
              expectedParams: {
                residentId: matchingResident.id,
                orgId,
                updatedAt: new Date(),
                userId,
              },
            }
          : null,
        totalResidents: allResidents.length,
        activeResidents: allResidents.filter(r => r.isActive).length,
        diagnosticTimestamp: new Date().toISOString(),
      };
    } catch (error) {
      console.error('Debug auto-linking failed:', error);
      return {
        error: error instanceof Error ? error.message : 'Unknown error',
        stack: error instanceof Error ? error.stack : undefined,
        userInfo: { userId, orgId },
        residents: [],
        matchingResident: null,
        totalResidents: 0,
        activeResidents: 0,
        diagnosticTimestamp: new Date().toISOString(),
      };
    }
  }),
});
